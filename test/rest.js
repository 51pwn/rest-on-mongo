require('dotenv').config();
const { expect } = require('chai');
const request = require('supertest');
const express = require('express');
const { MongoClient } = require('mongodb');
const restRoutes = require('../lib/restRoutes');

/*
 * Run this script using "mocha test/handlers" from the project directory.
 */

/* global describe it before after */

const toCreate = {
  _id: 'id-1',
  testDecimal: 1.5,
  testNumber: 10,
  testString: 'AgroStar',
  autoId: false,
};

const toCreateMany = [
  { _id: 'id-2', name: 'second', autoId: false },
  { _id: 'id-3', name: 'third', autoId: false },
  { name: 'auto id', autoId: true },
];

const toUpdate = {
  testNumber: 1.6,
};

const toUpdateMany = [
  { _id: 'id-2', update: 2, updated: true },
  { _id: 'id-3', update: 3, updated: true },
];

const toUpdateManyNoId = [
  { _id: 'id-2', update: 4, updated: true },
  { update: 5, updated: true },
];

const toReplace = {
  _id: 'id-2', replace: 1, replaced: true,
};

const toReplaceMany = [
  { _id: 'id-2', replace: 2, replaced: true },
  { _id: 'id-3', replace: 5, replaced: true },
];


let createdObjectId;

const dbUrl = 'mongodb://localhost';
const dbName = 'mongorest';
const collection = 'test';
const app = express();
let client;

describe('All handler tests', () => {
  before(async () => {
    client = new MongoClient(dbUrl, { useNewUrlParser: true, useUnifiedTopology: true });
    await client.connect();
    const db = client.db(dbName);
    app.use('/', (req, res, next) => {
      req.db = db;
      next();
    });
    app.use(restRoutes.all());
  });
  after(() => {
    client.close();
  });

  it('should clear collection', async () => {
    const res = await request(app)
      .delete(`/${collection}`);
    expect(res.statusCode).to.equal(200);
    expect(res.body.result.ok).to.equal(1);
  });

  describe('Create tests', () => {
    it('should create one', async () => {
      const res = await request(app)
        .post(`/${collection}`)
        .send(toCreate);
      expect(res.statusCode).to.equal(200);
      expect(res.body.result.ok).to.equal(1);
      expect(res.body.insertedCount).to.equal(1);
    });

    it('should create many', async () => {
      const res = await request(app)
        .post(`/${collection}`)
        .send(toCreateMany);
      expect(res.statusCode).to.equal(200);
      expect(res.body.result.ok).to.equal(1);
      expect(res.body.insertedCount).to.equal(toCreateMany.length);
      createdObjectId = res.body.insertedIds[toCreateMany.length - 1];
    });

    it('should fail to create duplicates', async () => {
      const res = await request(app)
        .post(`/${collection}`)
        .send(toCreateMany);
      expect(res.statusCode).to.equal(400);
    });
  });

  describe('Read tests', () => {
    it('should get one', async () => {
      const res = await request(app)
        .get(`/${collection}/id-1`);
      expect(res.statusCode).to.equal(200);
      expect(res.body.testNumber).to.equal(toCreate.testNumber);
      expect(res.body.testString).to.equal(toCreate.testString);
    });

    it('should get one - autogenerated ID', async () => {
      const res = await request(app)
        .get(`/${collection}/${createdObjectId}`);
      expect(res.statusCode).to.equal(200);
      expect(res.body.name).to.equal('auto id');
    });

    it('should get many (unfiltered)', async () => {
      const res = await request(app)
        .get(`/${collection}`);
      expect(res.statusCode).to.equal(200);
      expect(res.body.length).to.equal(Object.keys(toCreateMany).length + 1);
      expect(res.body[0]._id).to.equal('id-1');
    });

    it('should get many (filtered)', async () => {
      const res = await request(app)
        .get(`/${collection}?autoId=false`);
      expect(res.statusCode).to.equal(200);
      expect(res.body.length).to.equal(Object.keys(toCreateMany).length);
      expect(res.body[0]._id).to.equal('id-1');
    });
  });

  describe('Update tests', () => {
    it('should update one', async () => {
      let res = await request(app)
        .patch(`/${collection}/id-1`)
        .send(toUpdate);
      expect(res.statusCode).to.equal(200);
      expect(res.body.result.ok).to.equal(1);
      expect(res.body.modifiedCount).to.equal(1);
      // Check
      res = await request(app)
        .get(`/${collection}/id-1`);
      expect(res.statusCode).to.equal(200);
      expect(res.body.testNumber).to.equal(toUpdate.testNumber);
    });

    it('should fail to update one non-existent', async () => {
      const res = await request(app)
        .patch(`/${collection}/xxxx`)
        .send(toUpdate);
      expect(res.statusCode).to.equal(404);
      expect(res.body.result.ok).to.equal(1);
      expect(res.body.modifiedCount).to.equal(0);
    });

    it('should fail to update one non-object', async () => {
      const res = await request(app)
        .patch(`/${collection}/id-1`)
        .send(toUpdateMany);
      expect(res.statusCode).to.equal(400);
      expect(res.body.status).to.equal('error');
    });

    it('should update many', async () => {
      let res = await request(app)
        .patch(`/${collection}`)
        .send(toUpdateMany);
      expect(res.statusCode).to.equal(200);
      expect(res.body.result.ok).to.equal(1);
      expect(res.body.modifiedCount).to.equal(2);
      // Check
      res = await request(app)
        .get(`/${collection}?updated=true`);
      expect(res.statusCode).to.equal(200);
      expect(res.body.length).to.equal(toUpdateMany.length);
      expect(res.body[0].update).to.equal(toUpdateMany[0].update);
      expect(res.body[1].update).to.equal(toUpdateMany[1].update);
    });

    it('should fail to update many non-array', async () => {
      const res = await request(app)
        .patch(`/${collection}`)
        .send(toUpdate);
      expect(res.statusCode).to.equal(400);
      expect(res.body.status).to.equal('error');
    });

    it('should fail to update many without _id', async () => {
      const res = await request(app)
        .patch(`/${collection}`)
        .send(toUpdateManyNoId);
      expect(res.statusCode).to.equal(400);
      expect(res.body.status).to.equal('error');
    });
  });

  describe('Replace tests', () => {
    it('should replace one', async () => {
      let res = await request(app)
        .put(`/${collection}/id-2`)
        .send(toReplace);
      expect(res.statusCode).to.equal(200);
      expect(res.body.result.ok).to.equal(1);
      expect(res.body.modifiedCount).to.equal(1);
      // Check
      // console.log(res.body);
      res = await request(app)
        .get(`/${collection}/id-2`);
      expect(res.statusCode).to.equal(200);
      expect(res.body.replace).to.equal(toReplace.replace);
      expect(res.body.name).to.equal(toReplace.name);
    });

    it('should fail to replace non-existent', async () => {
      const res = await request(app)
        .put(`/${collection}/xxxx`)
        .send(toReplace);
      expect(res.statusCode).to.equal(404);
      expect(res.body.result.ok).to.equal(1);
      expect(res.body.modifiedCount).to.equal(0);
    });

    it('should replace many', async () => {
      let res = await request(app)
        .put(`/${collection}`)
        .send(toReplaceMany);
      expect(res.statusCode).to.equal(200);
      expect(res.body.result.ok).to.equal(1);
      expect(res.body.modifiedCount).to.equal(toReplaceMany.length);
      // Check
      res = await request(app)
        .get(`/${collection}?replaced=true`);
      expect(res.statusCode).to.equal(200);
      expect(res.body.length).to.equal(toReplaceMany.length);
      expect(res.body[0].replace).to.equal(toReplaceMany[0].replace);
      expect(res.body[0].name).to.equal(undefined);
    });

    it('should fail to replace many non-array', async () => {
      const res = await request(app)
        .put(`/${collection}`)
        .send(toReplace);
      expect(res.statusCode).to.equal(400);
      expect(res.body.status).to.equal('error');
    });

    it('should fail to update many without _id', async () => {
      const res = await request(app)
        .patch(`/${collection}`)
        .send(toUpdateManyNoId);
      expect(res.statusCode).to.equal(400);
      expect(res.body.status).to.equal('error');
    });
  });

  describe('Delete tests', () => {
    it('should delete one', async () => {
      let res = await request(app)
        .delete(`/${collection}/id-1`);
      expect(res.statusCode).to.equal(200);
      expect(res.body.result.ok).to.equal(1);
      expect(res.body.deletedCount).to.equal(1);
      // Check
      res = await request(app)
        .get(`/${collection}/id-1`);
      expect(res.statusCode).to.equal(404);
    });

    it('should fail to delete non-existent', async () => {
      const res = await request(app)
        .delete(`/${collection}/xxxx`);
      expect(res.statusCode).to.equal(404);
      expect(res.body.result.ok).to.equal(1);
      expect(res.body.deletedCount).to.equal(0);
    });

    it('should delete with filter', async () => {
      let res = await request(app)
        .delete(`/${collection}?replaced=true`);
      expect(res.statusCode).to.equal(200);
      expect(res.body.result.ok).to.equal(1);
      expect(res.body.deletedCount).to.equal(2);
      // Check
      res = await request(app)
        .get(`/${collection}?replaced=true`);
      expect(res.statusCode).to.equal(200);
      expect(res.body.length).to.equal(0);
      // Check other documents still exist
      res = await request(app)
        .get(`/${collection}`);
      expect(res.statusCode).to.equal(200);
      expect(res.body.length).to.equal(1);
    });

    it('should clear collection', async () => {
      let res = await request(app)
        .delete(`/${collection}`);
      expect(res.statusCode).to.equal(200);
      expect(res.body.result.ok).to.equal(1);
      // Check
      res = await request(app)
        .get(`/${collection}`);
      expect(res.statusCode).to.equal(200);
      expect(res.body.length).to.equal(0);
    });
  });
});
